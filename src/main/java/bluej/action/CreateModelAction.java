/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bluej.action;

import bluej.env3d.BEnv;
import bluej.FileAlreadyExistsException;
import bluej.action.AbstractEnvAction;
import bluej.extensions.BlueJ;
import java.awt.event.ActionEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.util.HashMap;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;
import env3d.util.Sysutil;

/**
 *
 * @author jmadar
 */
public class CreateModelAction extends AbstractEnvAction {

    private BEnv env;
    private String exampleDir;

    public CreateModelAction(String menuName, String msg) {

        putValue(AbstractAction.NAME, menuName);
        exampleDir = msg;
    }

    public void actionPerformed(ActionEvent ae) {
        try {
            String modelName = ae.getActionCommand();

            createModel(modelName, false);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
            e.printStackTrace();
        }
    }

    /** 
     * Creates a model file in the BlueJ environment
     */
    public static void createModel(String modelName, boolean useInheritance) throws Exception {
        
        String projectDirectory = "";
        if (bluej != null) projectDirectory = bluej.getCurrentPackage().getDir().getCanonicalPath() + "/";
        String className = modelName.substring(0, 1).toUpperCase() + modelName.substring(1);
        String modelDirectory = projectDirectory + "models/" + modelName;

        System.out.println("Creating Model Class " + modelDirectory);
        HashMap<String, String[]> modelsHash = Sysutil.createModelsHashMap(modelDirectory);

        File[] textureFiles = Sysutil.fileList(modelDirectory, new Sysutil.ImgFileFilter());

        File[] modelFiles = Sysutil.fileList(modelDirectory, new Sysutil.ObjFileFilter());
        
        File[] mtlFiles = Sysutil.fileList(modelDirectory, new Sysutil.MtlFileFilter());

        File outFile;
        if (bluej != null) {
            outFile= new File(projectDirectory + "/" + className + ".java");
        } else {
            outFile= new File( "src/" + className + ".java");
        }
        if (outFile.isFile()) {
            throw new FileAlreadyExistsException(outFile+" already exist");
        }
        BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));
        bw.write("import java.util.HashMap;\n");
        bw.write("import java.util.ArrayList;\n\n");
        bw.write("/**\n");
        bw.write(" * This class is generated by the env3d plugin to make\n");
        bw.write(" * it easier to work with models.  It scans a model\n");
        bw.write(" * directory for all the obj files and organized them.\n");        
        bw.write(" */\n");
        if (useInheritance) {            
            bw.write("public class " + className + " extends GameObject\n{\n");
        } else {
            bw.write("public class " + className + "\n{\n");
        }
        if (modelsHash.keySet().size() > 0) {
            bw.write("    // The various states of this model.  Each animation is a state\n");
            int i = 0;
            for (String action : modelsHash.keySet()) {
                bw.write("    public static final int " + action.toUpperCase() + " = " + (i++) + ";\n");
            }
            bw.write("    // The main data structure for animated models, a HashMap of ArrayList\n");
            bw.write("    private HashMap<Integer, ArrayList<String>> modelsMap = new HashMap<Integer, ArrayList<String>>();\n\n");
            bw.write("    //Fields for state management\n");
            bw.write("    private int state;\n");
            bw.write("    private int frame;\n\n");
        }
        if (!useInheritance) {
            bw.write("    // Required env3d fields\n");
            bw.write("    private double x, y, z, rotateX, rotateY, rotateZ, scale = 1;\n");
            bw.write("    private String texture, model;\n\n");
        }
        
        // zero argument constructor
        bw.write("    /**\n");
        bw.write("     * Zero-argument constructor that places the object in location 0, 0, 0\n");
        bw.write("     */\n");
        bw.write("    public " + className + "()\n    {\n");
        bw.write("        this(0,0,0);\n");
        bw.write("    }\n\n");      
        
        // parameterized constructor
        bw.write("    /**\n");
        bw.write("     * Parameterized constructor - allows arbitary of object\n");
        bw.write("     */\n");
        bw.write("    public " + className + "(double x, double y, double z)\n    {\n");        
        if (useInheritance) {
            bw.write("        setX(x);\n");
            bw.write("        setY(y);\n");
            bw.write("        setZ(z);\n");
            bw.write("        setScale(1);\n");

            if (textureFiles != null && textureFiles.length > 0 ){ 
                if (mtlFiles.length == 0) {
                    bw.write("        setTexture(\"models/" + modelName + "/" + textureFiles[0].getName() + "\");\n");
                } else {
                    bw.write("        // --- DO NOT REMOVE ---\n");
                    bw.write("        // using mtl file \"models/" + modelName + "/" +mtlFiles[0].getName()+"\"\n");
                    for (File textureFile : textureFiles) {
                        bw.write("        //       texture file \"models/" + modelName + "/" +textureFile.getName()+"\"\n");
                    }
                    bw.write("        // ---------------------\n");
                    bw.write("        setTexture(null);\n");
                }
            }
            if (modelFiles != null && modelFiles.length > 0) {
                    bw.write("        setModel(\"models/" + modelName + "/" + modelFiles[0].getName() + "\");\n");
            }
            
        } else {
            bw.write("        this.x = x;\n");
            bw.write("        this.y = y;\n");
            bw.write("        this.z = z;\n");

            if (textureFiles != null && textureFiles.length > 0) {
                if (mtlFiles.length == 0) {
                    bw.write("        texture = \"models/" + modelName + "/" + textureFiles[0].getName() + "\";\n");
                } else {
                    bw.write("        // --- DO NOT REMOVE ---\n");
                    bw.write("        // using mtl file \"models/" + modelName + "/" +mtlFiles[0].getName()+"\"\n");
                    for (File textureFile : textureFiles) {
                        bw.write("        //       texture file \"models/" + modelName + "/" +textureFile.getName()+"\"\n");
                    }
                    bw.write("        // ---------------------\n");
                    bw.write("        texture = null;\n");
                }
            }
            if (modelFiles != null && modelFiles.length > 0) {
                bw.write("        model = \"models/" + modelName + "/" + modelFiles[0].getName() + "\";\n");
            }
        }

        // Call the init method if there animation is available
        if (modelsHash.keySet().size() > 0) {
            bw.write("        // initialize the animation HashMap\n");
            bw.write("        init();\n");
        }
        bw.write("    }\n\n");

        // The animation method is used to activate animation
        if (modelsHash.keySet().size() > 0) {
            bw.write("    /** \n");
            bw.write("     * Basic implementation. Simply animate the model\n");
            bw.write("     * based on the state \n");
            bw.write("     */ \n");
            bw.write("    public void move() \n    {\n");
            if (useInheritance) {
                bw.write("        setModel(modelsMap.get(state).get(frame));\n");                
            } else {
                bw.write("        model = modelsMap.get(state).get(frame);\n");
            }
            bw.write("        frame = (frame+1) % modelsMap.get(state).size();\n");
            bw.write("    }\n\n");
            
            bw.write("    /**\n");
            bw.write("     * Returns the current animation state\n");
            bw.write("     */\n");
            bw.write("    public int getState()\n    {\n");
            bw.write("        return state;\n");            
            bw.write("    }\n\n");

            bw.write("    /**\n");
            bw.write("     * Sets the current animation state.  Resets frame counter to 0\n");
            bw.write("     * Note: it only sets the state if new state is different than\n");
            bw.write("     * the current state\n");
            bw.write("     */\n");            
            bw.write("    public void setState(int newState)\n    {\n");
            bw.write("        if (state != newState) {\n");
            bw.write("            frame = 0;\n");
            bw.write("            state = newState;\n");
            bw.write("        }\n");
            bw.write("    }\n\n");                       
        }


        String[] attributes = {"x", "y", "z", "rotateX", "rotateY", "rotateZ", "scale", "model", "texture"};
        String[] types = {"double", "double", "double", "double", "double", "double", "double", "String", "String"};

        if (!useInheritance) {
            // Create the standard getters and setters
            for (int i = 0; i < attributes.length; i++) {
                String attr = attributes[i];
                String type = types[i];                
                bw.write("    public " + type + " get" + attr.substring(0, 1).toUpperCase() + attr.substring(1) + "() {\n");
                bw.write("        return " + attr + ";\n");
                bw.write("    }\n\n");

                bw.write("    public void set" + attr.substring(0, 1).toUpperCase() + attr.substring(1) + "(" + type + " " + attr + ") {\n");
                bw.write("        this." + attr + " = " + attr + ";\n");
                bw.write("    }\n\n");
            }
        }

        if (modelsHash.keySet().size() > 0) {
            // Create the init method to load all the models
            bw.write("    // Initialize the modelsMap hash for animation purpose\n");
            bw.write("    private void init() {\n");

            for (String action : modelsHash.keySet()) {
                int i = 0;
                bw.write("        ArrayList<String> " + action + " = new ArrayList<String>();\n");
                for (String objFile : modelsHash.get(action)) {
                    String fileName = objFile.substring(projectDirectory.length()).replace("\\", "/");
                    bw.write("        " + action + ".add(\"" + fileName + "\");\n");
                    i++;
                }
                bw.write("        modelsMap.put(" + action.toUpperCase() + "," + action + ");\n");
            }
            bw.write("    }\n\n");
        }
        bw.write("}\n");
        bw.close();
        if (bluej != null) bluej.getCurrentPackage().newClass(className);
    }
    
}
